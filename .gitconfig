[user]
  name = Andrew Jorgensen
  email = andrew@andrewjorgensen.com
  signingkey = B10424F37FA56977
[github]
  user = ajorgensen
[core]
  pager = diff-so-fancy | less --tabs=4 -RFX
  excludesfile = ~/.gitignore
	precomposeUnicode = true
[diff]
	colorMoved = zebra
[color]
    ui = auto
[color "diff-highlight"]
	  oldNormal = red
	  oldHighlight = red "#500000"
	  newNormal = green
	  newHighlight = green "#003000"
[color "diff"]
	  meta = 11
	  frag = magenta bold
	  commit = yellow bold
	  old = red
	  new = green
	  whitespace = "#ffff00" reverse
[merge]
    tool = vimdiff
[diff-so-fancy]
    stripLeadingSymbols = false
    markEmptyLines = false
[commit]
  gpgsign = true
	verbose = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[include]
	path = /Users/ajorgensen/code/dev-box/dotfiles/gitconfig
[alias]
  st = status --short
  ci = commit --verbose
  ca = commit --amend
  caa = commit -a --amend
  br = branch
  co = checkout
  df = diff
  lg = log -p --pretty=fuller --abbrev-commit
  lgg = log --pretty=fuller --abbrev-commit --stat
  up = pull --rebase

  di = diff --find-copies-harder
  dc = diff --find-copies-harder --cached
  amend = commit --amend
  aa = add --all
  ff = merge --ff-only
  noff = merge --no-ff
  fa = fetch --all
  ds = diff --stat=160,120
  dh1 = diff HEAD~1

  # Divergence (commits we added and commits remote added)
  div = divergence

  # Goodness (summary of diff lines added/removed/total)
  gn = goodness
  gnc = goodness --cached

  # Fancy logging.
  head = !git r -1
  h = !git head
  hp = "!. ~/.githelpers && show_git_head"
  r = !GIT_NO_PAGER=1 git l -30
  ra = !git r --all
  l = "!. ~/.githelpers && pretty_git_log"
  la = !git l --all
  b = "!. ~/.githelpers && pretty_git_branch"
  bs = "!. ~/.githelpers && pretty_git_branch_sorted"
  ski = !git stash --keep-index
  cp = cherry-pick
  pf = push --force-with-lease

  branch-name = "!git rev-parse --abbrev-ref HEAD"
  put = "!git push -u origin $(git branch-name)"
  delete = "!git push origin :$(git branch-name)"
  fix-to-base = "!git rebase -i $(git merge-base $(git branch-name) $(git default-branch))"
  sync = "!git fetch -p && git rebase origin/$(git default-branch)"

  default-branch = "!git symbolic-ref refs/remotes/origin/HEAD | cut -f4 -d/"
  sync-origin = "!git remote set-head origin --auto"

  fresh = !sh -c \"git checkout -b \\$0 && git reset --hard origin/$(git default-branch)\"

  done = "!BRANCH=$(git branch-name); f() { git checkout $(git default-branch) && git branch -D $BRANCH; }; f"
  rmbr = "!f() { git branch -D $@ && git push origin --delete $@; }; f"
  cleanup = "!BRANCH=$(git branch-name); f() { git checkout $(git default-branch) && git rmbr $BRANCH; }; f"
  rmremote = !sh -c \"git push origin --delete \\$0\"

  review = "!git diff $(git merge-base $(git default-branch) HEAD)..HEAD"
  diff-branch = "!f() { git diff $(git merge-base $(git default-branch) $1)..$1 ${@:2}; }; f"
  branches-by-date = "!git for-each-ref --sort='-committerdate' --format='%(refname)%09%(committerdate)' refs/heads | sed -e 's-refs/heads/--'"
  branches-sorted = "!git for-each-ref --sort=-committerdate refs/heads/"
  merged-branches = "!git branch --merged $(git default-branch) | grep -v $(git default-branch) | grep -v 'release-*'"
  delete-merged-branches = "!git merged-branches | xargs git branch -d && git remote prune origin"

  head = "!git rev-parse --short HEAD"
[puill]
	rebase = true
[fetch]
	prune = true
