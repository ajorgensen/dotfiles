set shell=bash

" ========================================================================
" Much plugin, such features
" mkdir -p ~/.vim/autoload
" curl -fLo ~/.vim/autoload/plug.vim \
"     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
" ========================================================================
if has('nvim')
  call plug#begin('~/.config/nvim/plugged')
else
  call plug#begin('~/.vim/plugged')
endif

" General
if has('nvim')
  Plug 'benekastah/neomake'
  autocmd! BufWritePost * Neomake
endif

Plug 'bling/vim-airline'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'mhinz/vim-startify'
Plug 'rking/ag.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-dispatch'
Plug 'SirVer/ultisnips'
Plug 'ervandew/supertab'
Plug 'valloric/youcompleteme'
Plug 'jiangmiao/auto-pairs'
Plug 'majutsushi/tagbar'

" Colorschemes
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'

" Markdown
Plug 'davinche/godown-vim'
Plug 'plasticboy/vim-markdown'
Plug 'godlygeek/tabular'

call plug#end()

" ========================================================================
" General Config
" ========================================================================
" Enable filetype plugins
filetype plugin indent on

" Turn on project specific rc files
set exrc

" How many lines of history vim has to remember
set history=1000

" Auto read a when a file is changed
set autoread

" Make vim not comptabile with vi
set nocompatible

" Makes searching for css tokens easier
set iskeyword+=-

" Allow unsaved background buffers and remember marks/undo for them
set hidden

" Don't backup the current file before writing
set nobackup
set nowritebackup

" Turn off swap files
set noswapfile

" Turn off the annoying bell when an error happens
set noerrorbells

" Put the new split to the right of the current one
set splitright

" Search while typing
set incsearch

" Dont ignore case if the search has an uppercase character
set smartcase

" Highlight search matches
set hlsearch

" Always show the status line
set laststatus=2

" Persist undo history across session
set undofile
set undodir=~/.vimundo/

" Ignore case in searches
set ignorecase

" Set the height of the command box
set cmdheight=2

" Switch between open buffers
set switchbuf=useopen

" Numbering
set number
set numberwidth=5
set relativenumber

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" Keep more context when scrolling off the end of a buffer
set scrolloff=3

set backspace=indent,eol,start
set showcmd

" Make tab completion for files/buffers act like bash
set wildmenu
set wildmode=full

" Dont redraw when executing macros etc until they are done
set lazyredraw
set ttyfast
set synmaxcol=250

" show the cursor position at all times
set ruler

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

if has('nvim')
  " Neovim shell
  " set shell=/bin/zsh
  tnoremap <Esc> <C-\><C-n>
endif

" ========================================================================
" Formatting
" ========================================================================
" Turns spaces into tabs
set expandtab

" 1 tab == 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2

set cursorline

set showmatch

" Auto indent based on the previous line
set autoindent

" Insert blanks when tab is in front of a line
set smarttab

" Wrap lines to fit on the screen
set wrap
set linebreak

" Custom status line
set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)

let g:netrw_liststyle=3

" Display extra whitespace
set list listchars=tab:»·,trail:·

" Highlighting at 121st column
highlight ColorColumn ctermbg=235
set colorcolumn=120


" ========================================================================
" Autogroup
" ========================================================================
augroup vimrcEx
  autocmd!

  " For all text files set 'textwidth' to 80 characters.
  autocmd FileType text setlocal textwidth=80

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md set filetype=markdown

  " Enable spellchecking for Markdown
  autocmd FileType markdown setlocal spell
augroup END

" Reload rc file after writing
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc,init.vim so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END


" ========================================================================
" Mappings
" ========================================================================
let mapleader = " "
let g:mapleader = " "

noremap <leader>ec :e ~/.config/nvim/init.vim<cr>
nnoremap <F2> :buffers<CR>:buffer<Space>

" Index ctags from any project, including those outside Rails
map <Leader>ct :!ctags -R .<CR>

" Faster saving
noremap <Leader>w :w<CR>

" Only save if the file has been modified
noremap <Leader>s :up<CR>

" Save and exit
noremap <Leader>x :exit<CR>

" Fast quiting
noremap <Leader>q :q<cr>

vmap <Leader>y "+y
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P
noremap ; :
noremap <C-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

map <leader>y "+y
" Can't be bothered to understand ESC vs <c-c> in insert mode
imap <c-c> <esc>
inoremap jj <ESC>
inoremap jk <ESC>
noremap <c-s> <esc>:w<cr>
command! Q q
command! -bar -bang Q quit<bang>
command! W w
noremap Q <Nop>

map <leader>pry orequire 'pry'; binding.pry<CR><ESC>

" Move around splits with <c-hjkl>
" See: https://github.com/neovim/neovim/issues/2048
if has('nvim')
  nmap <BS> <C-W>h
endif
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

inoremap jk <ESC>

nmap oo o<Esc>k
nmap OO O<Esc>j

nnoremap <leader><space> :nohlsearch<CR> " turn off search highlight
inoremap jk <esc> " jk is escape

nnoremap H 0
nnoremap L $

nnoremap ; :

autocmd FileType ruby nmap <buffer> <leader>rm <Plug>(seeing_is_believing-mark)
autocmd FileType ruby xmap <buffer> <leader>rm <Plug>(seeing_is_believing-mark)
autocmd FileType ruby imap <buffer> <leader>rm <Plug>(seeing_is_believing-mark)

autocmd FileType ruby nmap <buffer> <leader>rc <Plug>(seeing_is_believing-clean)
autocmd FileType ruby xmap <buffer> <leader>rc <Plug>(seeing_is_believing-clean)
autocmd FileType ruby imap <buffer> <leader>rc <Plug>(seeing_is_believing-clean)

" xmpfilter compatible
autocmd FileType ruby nmap <buffer> <leader>rr <Plug>(seeing_is_believing-run_-x)
autocmd FileType ruby xmap <buffer> <leader>rr <Plug>(seeing_is_believing-run_-x)
autocmd FileType ruby imap <buffer> <leader>rr <Plug>(seeing_is_believing-run_-x)

" auto insert mark at appropriate spot.
autocmd FileType ruby nmap <buffer> <F5> <Plug>(seeing_is_believing-run)
autocmd FileType ruby xmap <buffer> <F5> <Plug>(seeing_is_believing-run)
autocmd FileType ruby imap <buffer> <F5> <Plug>(seeing_is_believing-run)


" auto wrap git commit messages
autocmd Filetype gitcommit setlocal spell textwidth=72

" Open In Github
map <leader>gh :OpenGithubFile<cr>
map <leader>hg :<,'>OpenGithubFile<cr>

" ========================================================================
" Color and Fonts
" ========================================================================
syntax on
syntax enable " enable synatx processing

" 256 colors by default
set t_Co=256
let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
let g:rehash256 = 1
set background=dark
colorscheme molokai

if !has('nvim')
  set encoding=utf8
endif

" Set highlighting format
hi clear SignColumn
hi SpellBad cterm=underline

" ========================================================================
" Custom functions
" ========================================================================

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>n :call RenameFile()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" DUPLICATE CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! DuplicateFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    redraw!
  endif
endfunction
map <leader>d :call DuplicateFile()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Clean file on write
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufWritePre * :call <SID>CleanFile()
function! <SID>CleanFile()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let [l,c] = [line("."),col(".")]

    " Do the business:
    " %!git strip space
    silent! %s/\s\+$//e
    silent! %s#\($\n\s*\)\+\%$##

    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

function! <SID>StripBlankLinesAtEndOfFile()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")

    %s#\($\n\s*\)\+\%$##

    let @/=_s
    call cursor(l, c)
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Spell checker
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! ToggleSpellchecker()
  if(&spell == 1)
    echo "Spell checker off"
    set nospell
  else
    echo "Spell checker on"
    set spell spelllang=en_us
  endif
endfunc
nnoremap <F3> :call ToggleSpellchecker()<cr>

" Make Y behave like other capitals
map Y y$


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Silver searcher
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ackprg = 'ag --nogroup --nocolor --column'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Run external command
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Inline the output of an external command and strip out newlines
function! InlineCommand()
    let l:cmd = input('Command: ')
    let l:output = system(l:cmd)
    let l:output = substitute(l:output, '[\r\n]*$', '', '')
    execute 'normal i' . l:output
endfunction
nmap <silent> \e :call InlineCommand()<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Format json
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! FormatJSON %!python -m json.tool

""""""""""""""
" YCM
""""""""""""""
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']

""""""""""""""
" SuperTab
""""""""""""""
let g:SuperTabDefaultCompletionType = '<C-n>'

""""""""""""""
" Ultisnips
""""""""""""""
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

""""""""""""""
" File Browsing
""""""""""""""
map <C-p> :Explore<CR>

""""""""""""""
" FZF
""""""""""""""
noremap <leader>f :FZF<cr>

""""""""""""""
" TagBar
""""""""""""""
nmap <F8> :TagbarToggle<CR>

""""""""""""""
" Markdown
""""""""""""""
let g:instant_markdown_autostart = 0
let g:vim_markdown_folding_disabled = 1
