[init]
    defaultBranch = main

[help]
    autocorrect = 1

[user]
    name = Andrew Jorgensen
    email = git@aj.codes

[github]
    user = ajorgensen

[pull]
    rebase = true

[core]
    # Use custom `.gitignore`
    excludesfile = ~/.config/git/ignore

    # Treat spaces before tabs and all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS.
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

    pager = delta

[interactive]
    diffFilter = delta --color-only

[diff]
    colorMoved = zebra

[delta]
    navigate = true

[color]
    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ‚â• 1.8.4.)
    ui = auto

[merge]
    conflictstyle = diff3
    prompt = false

[commit]
    gpgsign = true
    verbose = true

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[push]
    autoSetupRemote = true

[alias]
    co = checkout
    ci = commit
    st = status
    br = branch
    di = diff
    fp = fetch --prune
    rb = rebase

    hist = log --graph --abbrev-commit --decorate --date=short \
		--format=format:'%C(bold cyan)%h%C(reset) %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)%an%C(reset) %C(bold yellow)%d%C(reset)' \
		--branches --remotes --tags

    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    put = push -u origin HEAD

    rb = rebase
    rbi = rebase -i --keep-base

    r = reset
    rh = reset --hard
    dfst = diff --stat

    save = commit -m "SAVE"
    step-back = reset --soft HEAD^
    new = checkout -b

    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    branch-by-date = branch --sort=-committerdate

    branch-name = "!git rev-parse --abbrev-ref HEAD"

    default-branch = "!git symbolic-ref refs/remotes/origin/HEAD | cut -f4 -d/"

    rsync = "!git pull origin $(git default-branch) --rebase"
    msync = "!git pull origin $(git default-branch)"

    update = "!git pull origin $(git rev-parse --abbrev-ref HEAD) --rebase"
    squash = "!git rebase -v -i origin $(git default-branch)"
    publish = push origin HEAD --force-with-lease
    pub = publish
    amend = commit --amend --reuse-message=HEAD
    rebase-onto = "!f() { git rebase --onto main $(git merge-base $1 $2) $1; }; f"

    gone = "!git fetch -p && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D $branch"
    down = "!BRANCH=$(git branch-name); f() { git checkout $(git default-branch) && git gone; }; f"
    done = "!BRANCH=$(git branch-name); f() { git checkout $(git default-branch) && git branch -D $BRANCH; }; f"

    tags = tag -l
    branches = branch --all
    remotes = remote --verbose
    aliases = config --get-regexp alias

    change-stats = "!git diff origin...HEAD --numstat | awk '{ added += $1; removed += $2 } END { print \"+\" added \" -\" removed }'"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with main.
    # a.k.a. ‚Äòdelete merged‚Äô
    dm = "!git branch --merged | grep -v '\\*' | grep -v $(git default-branch) | xargs -n 1 git branch -d"
    rm-merged = "!git branch --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" { print $1 }' | xargs -r git branch -D"

    # List contributors with number of commits.
    contributors = shortlog --summary --numbered

    # Show the user email for the current repository.
    whoami = config user.email
	review = "!f() { \\\n    base_branch=${1:-origin/main}; \\\n    current_branch=$(git rev-parse --abbrev-ref HEAD); \\\n    echo \"üîç Reviewing changes on branch: $current_branch\"; \\\n    echo \"üìä Comparing against: $base_branch\\n\"; \\\n    \\\n    echo \"=== üìù Commit Summary ===\"; \\\n    git log --pretty=format:\"%C(yellow)%h%Creset -%C(bold green)%d%Creset %s %C(dim)(%cr) %C(bold blue)<%an>%Creset\" $base_branch..$current_branch; \\\n    \\\n    echo \"\\n\\n=== üìà Stats ===\"; \\\n    git diff --stat $base_branch..$current_branch; \\\n    \\\n    echo \"\\n=== ‚ö†Ô∏è  Potential Issues ===\"; \\\n    git diff --check $base_branch..$current_branch; \\\n    \\\n    echo \"\\n=== üìã File Changes ===\"; \\\n    git diff --color $base_branch..$current_branch; \\\n}; f"

[apply]
  # Detect whitespace errors when applying a patch.
    whitespace = fix

[fetch]
    prune = true

[log]
    date = local

[tag]
	sort = version:refname

[branch]
	sort = -committerdate

[rerere]
	enabled = true

[include]
    path = ~/.gitoverrides
