snippet jdoc
/**
* ${0}
*/
endsnippet

snippet md "Method With javadoc" b
/**
 * ${7:Short Description}`!p
for i in getArgs(t[4]):
	snip.rv += "\n\t * @param " + i[1] + " usage..."`
 * `!p
if "throws" in t[5]:
	snip.rv = "\n\t * @throws " + t[6]
else:
	snip.rv = ""` `!p
if not "void" in t[2]:
	snip.rv = "\n\t * @return object"
else:
	snip.rv = ""`
 **/
${1:public} ${2:void} ${3:method}($4) ${5:throws $6 }{
	$0
}
endsnippet

snippet pln
System.out.println(${0});
endsnippet

snippet toStr
@Override
public String toString() {
    return "`!p snip.rv = snip.basename`{" +
			"${3}=" + ${4} +
			"}";
}
endsnippet

snippet clc "class and constructor" b
public class `!p
snip.rv = snip.basename or "untitled"` {

	public `!p snip.rv = snip.basename or "untitled"`($2) {
		$0
	}
}
endsnippet

snippet cl "class" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} {
	$0
}
endsnippet

snippet func
public ${1:void} ${2:somFunc}(${3}) {
	${0}
}
endsnippet

snippet before
@Before
public void setUp() {
	${0}
}
endsnippet

snippet test
@Test
public void ${1}() throws Exception {
	${0}
}
endsnippet

snippet ae
assertEquals(${1:expected}, ${0:actual});
endsnippet
