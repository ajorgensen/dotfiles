[init]

    defaultBranch = main

[help]

    autocorrect = 1

[include]

    path = .gituser

[core]

  # Use custom `.gitignore` and `.gitattributes`.
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS.
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

[diff]
    colorMoved = zebra

[color]

    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    ui = auto

[color "branch"]

    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]

    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]

    added = yellow
    changed = green
    untracked = cyan

[merge]

    tool = vimdiff

[commit]

    gpgsign = true
    verbose = true

[filter "lfs"]

    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[alias]

    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    s = status -s
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    co = !git checkout

    branch-name = "!git rev-parse --abbrev-ref HEAD"

    default-branch = "!git symbolic-ref refs/remotes/origin/HEAD | cut -f4 -d/"
    sync = "!git pull origin $(git default-branch) --rebase"
    update = "!git pull origin $(git rev-parse --abbrev-ref HEAD) --rebase"
    squash = "!git rebase -v -i origin $(git default-branch)"
    publish = push origin HEAD --force-with-lease
    pub = publish
    amend = commit --amend --reuse-message=HEAD
    put = push -u origin HEAD

    gone = "!git fetch -p && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D $branch"
    down = "!BRANCH=$(git branch-name); f() { git checkout $(git default-branch) && git gone; }; f"
    done = "!BRANCH=$(git branch-name); f() { git checkout $(git default-branch) && git branch -D $BRANCH; }; f"

    tags = tag -l
    branches = branch --all
    remotes = remote --verbose
    aliases = config --get-regexp alias

    change-stats = "!git diff origin...HEAD --numstat | awk '{ added += $1; removed += $2 } END { print \"+\" added \" -\" removed }'"

    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with main.
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # List contributors with number of commits.
    contributors = shortlog --summary --numbered

    # Show the user email for the current repository.
    whoami = config user.email
[apply]

  # Detect whitespace errors when applying a patch.
    whitespace = fix

[fetch]

    prune = true
