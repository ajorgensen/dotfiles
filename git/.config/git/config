[user]
    name = Andrew Jorgensen
    email = git@aj.codes

[github]
    user = ajorgensen

[init]
    defaultBranch = main
[branch]
    sort = -committerdate

[tag]
    sort = version:refname

[diff]
    algorithm = histogram
    colorMoved = plain
    mnemonicPrefix = true
    renames = true

[push]
    default = simple
    autoSetupRemote = true
    followTags = true

[fetch]
    prune = true
    pruneTags = true
    all = true

[help]
    autocorrect = prompt

[commit]
    gpgsign = true
    verbose = true

[rerere]
    enabled = true
    autoupdate = true

[core]
    # Use custom `.gitignore`
    excludesfile = ~/.config/git/ignore

    # Treat spaces before tabs and all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS.
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

    fsmonitor = true

[rebase]
    autoSquash = true
    autostash = true
    updateRefs = true

[merge]
    conflictstyle = zdiff3

[pull]
    rebase = true
    ff = only

[apply]
  # Detect whitespace errors when applying a patch.
    whitespace = fix

[color]
    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    ui = auto

 [color "diff"]
    whitespace = red reverse

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

 [log]
    date = iso

[alias]
    co = checkout
    ci = commit
    st = status
    br = branch

    to-the-chopper = commit --amend --no-edit

    changed = !"git log --oneline  $(git default-branch)..HEAD"
    hist = log --graph --abbrev-commit --decorate --date=short \
		--format=format:'%C(bold cyan)%h%C(reset) %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)%an%C(reset) %C(bold yellow)%d%C(reset)' \
		--branches --remotes --tags
    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    put = push -u origin HEAD

    save = commit -m "SAVE"
    step-back = reset --soft HEAD^

    change = "!git switch $(git branch-select)"
    branches= "!git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short) %(committerdate:relative)'"
    branch-select = "!git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short) %(committerdate:relative)' | fzf --height=20% --reverse --info=inline | awk '{print $1}'"
    branch-name = current-branch

    freshb = "!f() { git fetch && git checkout -b $1 origin/main; }; f"

    current-branch = "!git rev-parse --abbrev-ref HEAD"
    default-branch = "!git symbolic-ref refs/remotes/origin/HEAD | cut -f4 -d/"

    sync = "!git pull origin $(git default-branch) --rebase"
    update = "!git pull origin $(git rev-parse --abbrev-ref HEAD) --rebase"

    # Switch to default branch and delete the current branch
    done = "!BRANCH=$(git current-branch); f() { git checkout $(git default-branch) && git branch -D $BRANCH; }; f"
    destroy = "!BRANCH=$(git current-branch); f() { git checkout $(git default-branch) && git branch -D $BRANCH && git push origin --delete $BRANCH; }; f"

    aliases = config --get-regexp alias

    change-stats = "!git diff origin...HEAD --numstat | awk '{ added += $1; removed += $2 } END { print \"+\" added \" -\" removed }'"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with main.
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | grep -v $(git default-branch) | xargs -n 1 git branch -d"
    rm-merged = "!git branch --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" { print $1 }' | xargs -r git branch -D"
    gone = "!f() { git fetch --all --prune; git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D; }; f"

    # List contributors with number of commits.
    contributors = shortlog --summary --numbered

    # Show the user email for the current repository.
    whoami = config user.email

[include]
    path = ~/.gitoverrides
