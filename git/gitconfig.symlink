[user]
  name = Andrew Jorgensen
  email = andrew@andrewjorgensen.com
[credential]
  helper = osxkeychain
[github]
  user = ajorgensen
[alias]
  branch-name = "!git rev-parse --abbrev-ref HEAD"
  put = "!git push -u origin $(git branch-name)"
  delete = "!git push origin :$(git branch-name)"
  # Delete a branch and recreate it from master â€” useful if you have, say,
  # a development branch and a master branch and they could conceivably go
  # out of sync
  recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"

  code-review = difftool origin/master...
  sync = "!git fetch -p && git rebase origin/master"

  unstage = reset HEAD
  diffc = diff --cached
  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged

  # Checkout our version of a file and add it
  ours = "!f() { git checkout --ours $@ && git add $@; }; f"
  # Checkout their version of a file and add it
  theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

  co = checkout
  cob = checkout -b
  aa = add --all
  rmtag = !sh -c \"git tag -d \\$0 && git push origin :refs/tags/\\$0\"
  fresh = !sh -c \"git checkout -b \\$0 && git reset --hard origin/master\"
  track = !git branch --set-upstream-to=origin/$(git rev-parse --abbrev-ref HEAD)

  rmbr = "!f() { git branch -D $@ && git push origin --delete $@; }; f"
  cleanup = "!BRANCH=$(git branch-name); f() { git checkout master && git rmbr $BRANCH; }; f"
  rmremote = !sh -c \"git push origin --delete \\$0\"
[core]
  excludesfile = ~/.gitignore
  editor = nvim
[diff]
  tool = vimdiff
[push]
  default = current
[branch]
  autosetuprebase = always
[help]
  autocorrect = 1
[merge]
  tool = kdiff3
